@startuml Схема суммаризации пост-фактум
start
:Получено сообщение;
if (Является аудиосообщением) then (да)
  :Сохранение оригинального аудиофайла в S3 хранилище;
  floating note left: Аудиофайл: оригинал

  group Диаризация
  if (Известно количество собеседников) then (да)
    ' :*Зафксированная диаризация*;
  else (нет)
    ' :*Незафксированная диаризация*;
    #bisque :Определение количества собеседников;
  endif
  if (2 и более собеседника) then (да)
    #bisque :Разделение фраз собеседников по звуковым дорожкам;
    #bisque :Обновление оригинального файла в хранилище S3;
  else (нет)
  endif
  end group
  
  group Транскрибация
  :*Транскрибация*;
  ' TODO
  floating note left: Аудиофайл: один собеседник\n = одна звуковая дорожка [S3]
  switch (Длительность)
    case (До 30 секунд)
      :Отправка запроса в синхронное API STT;
    case (От 30 секунд до 4 часов) 
      ' :Отправка оригинального\nфайла в хранилище S3;
      :Создание задачи через API\nасинхронного STT;
      repeat
        :Опрос API со статусом задачи и\nвозможными результатами;
      backward :Задержка N-секунд;
      repeat while (задача завершена) is (нет)
      ' TODO: добавить название "да"
    case (Более 4 часов)
      ' TODO: продумать, что будет
      stop
  endswitch
  :Получение результатов транскрибации;
  end group
  :Сохранение результатов транскрибации;
  :Преобразование транскрибации в формат прямой речи;
else (нет)
  ' :Получено сообщение;
endif

group Суммаризация
#lavender :Разделение монолитного текста прямой\nречи на смысловые фрагменты;
#lavender :Извлечение наиболее релевантных частей;
floating note left: Текст: разговор в формате\n""СОБЕСЕДНИК 1: РЕПЛИКА 1""\n""СОБЕСЕДНИК 2: РЕПЛИКА 2""
#lavender :*Суммаризация*;
' TODO

#lavender :*Экстракция фактов*;
' TODO
end group
end 
@enduml
